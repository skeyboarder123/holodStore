const fs = require('fs');
const path = require('path');

// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
const distDir = path.join(__dirname, 'dist');

// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–±–æ—Ä–∫—É
if (fs.existsSync(distDir)) {
  fs.rmSync(distDir, { recursive: true });
}
fs.mkdirSync(distDir);

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
function copyDir(src, dest) {
  fs.mkdirSync(dest, { recursive: true });
  const entries = fs.readdirSync(src, { withFileTypes: true });
  
  for (let entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    
    if (entry.isDirectory()) {
      copyDir(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã –ø—É—Ç–µ–π
function fixPaths(filePath) {
  let content = fs.readFileSync(filePath, 'utf8');
  
  // –ó–∞–º–µ–Ω—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ
  content = content.replace(/src="\/([^"]+)"/g, 'src="./$1"');
  content = content.replace(/href="\/([^"]+)"/g, 'href="./$1"');
  content = content.replace(/href="\/"/g, 'href="./"');
  
  fs.writeFileSync(filePath, content);
}

// –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å
copyDir(path.join(__dirname, 'public'), distDir);
copyDir(path.join(__dirname, 'src'), path.join(distDir, 'src'));

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ HTML
fixPaths(path.join(distDir, 'index.html'));

// –°–æ–∑–¥–∞–µ–º 404.html
fs.copyFileSync(
  path.join(distDir, 'index.html'),
  path.join(distDir, '404.html')
);

// –°–æ–∑–¥–∞–µ–º .nojekyll
fs.writeFileSync(path.join(distDir, '.nojekyll'), '');

console.log('‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Å–±–æ—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞!');
console.log('üìÅ –§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
console.log('üöÄ –ì–æ—Ç–æ–≤–æ –¥–ª—è GitHub Pages!');
